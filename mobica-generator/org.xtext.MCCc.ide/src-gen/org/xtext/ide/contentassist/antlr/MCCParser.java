/*
 * generated by Xtext 2.34.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalMCCParser;
import org.xtext.services.MCCGrammarAccess;

public class MCCParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MCCGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MCCGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
			builder.put(grammarAccess.getDeviceAccess().getAlternatives(), "rule__Device__Alternatives");
			builder.put(grammarAccess.getFragmentAccess().getIsOfflodableAlternatives_9_0(), "rule__Fragment__IsOfflodableAlternatives_9_0");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getCloudAccess().getGroup(), "rule__Cloud__Group__0");
			builder.put(grammarAccess.getMobileAccess().getGroup(), "rule__Mobile__Group__0");
			builder.put(grammarAccess.getApplicationAccess().getGroup(), "rule__Application__Group__0");
			builder.put(grammarAccess.getStructureAccess().getGroup(), "rule__Structure__Group__0");
			builder.put(grammarAccess.getEdgeAccess().getGroup(), "rule__Edge__Group__0");
			builder.put(grammarAccess.getEdgeAccess().getGroup_3(), "rule__Edge__Group_3__0");
			builder.put(grammarAccess.getFragmentAccess().getGroup(), "rule__Fragment__Group__0");
			builder.put(grammarAccess.getSystemAccess().getGroup(), "rule__System__Group__0");
			builder.put(grammarAccess.getSystemAccess().getGroup_4(), "rule__System__Group_4__0");
			builder.put(grammarAccess.getModelAccess().getDevicesAssignment_0(), "rule__Model__DevicesAssignment_0");
			builder.put(grammarAccess.getModelAccess().getApplicationsAssignment_1(), "rule__Model__ApplicationsAssignment_1");
			builder.put(grammarAccess.getModelAccess().getSystemsAssignment_2(), "rule__Model__SystemsAssignment_2");
			builder.put(grammarAccess.getCloudAccess().getNameAssignment_1(), "rule__Cloud__NameAssignment_1");
			builder.put(grammarAccess.getCloudAccess().getCpuInstructionsAssignment_3(), "rule__Cloud__CpuInstructionsAssignment_3");
			builder.put(grammarAccess.getCloudAccess().getApplicationsAssignment_5(), "rule__Cloud__ApplicationsAssignment_5");
			builder.put(grammarAccess.getMobileAccess().getNameAssignment_1(), "rule__Mobile__NameAssignment_1");
			builder.put(grammarAccess.getMobileAccess().getCpuInstructionsAssignment_3(), "rule__Mobile__CpuInstructionsAssignment_3");
			builder.put(grammarAccess.getMobileAccess().getApplicationsAssignment_5(), "rule__Mobile__ApplicationsAssignment_5");
			builder.put(grammarAccess.getMobileAccess().getBatteryAssignment_7(), "rule__Mobile__BatteryAssignment_7");
			builder.put(grammarAccess.getMobileAccess().getNetworkAssignment_9(), "rule__Mobile__NetworkAssignment_9");
			builder.put(grammarAccess.getMobileAccess().getMemoryAssignment_11(), "rule__Mobile__MemoryAssignment_11");
			builder.put(grammarAccess.getApplicationAccess().getNameAssignment_1(), "rule__Application__NameAssignment_1");
			builder.put(grammarAccess.getApplicationAccess().getFragmentsAssignment_3(), "rule__Application__FragmentsAssignment_3");
			builder.put(grammarAccess.getApplicationAccess().getStructureAssignment_4(), "rule__Application__StructureAssignment_4");
			builder.put(grammarAccess.getStructureAccess().getNameAssignment_1(), "rule__Structure__NameAssignment_1");
			builder.put(grammarAccess.getStructureAccess().getEdgesAssignment_3(), "rule__Structure__EdgesAssignment_3");
			builder.put(grammarAccess.getEdgeAccess().getStartAssignment_0(), "rule__Edge__StartAssignment_0");
			builder.put(grammarAccess.getEdgeAccess().getOperatorAssignment_1(), "rule__Edge__OperatorAssignment_1");
			builder.put(grammarAccess.getEdgeAccess().getStopAssignment_2(), "rule__Edge__StopAssignment_2");
			builder.put(grammarAccess.getEdgeAccess().getStopAssignment_3_1(), "rule__Edge__StopAssignment_3_1");
			builder.put(grammarAccess.getFragmentAccess().getNameAssignment_1(), "rule__Fragment__NameAssignment_1");
			builder.put(grammarAccess.getFragmentAccess().getInstructionsAssignment_3(), "rule__Fragment__InstructionsAssignment_3");
			builder.put(grammarAccess.getFragmentAccess().getMemoryAssignment_5(), "rule__Fragment__MemoryAssignment_5");
			builder.put(grammarAccess.getFragmentAccess().getSyncAssignment_7(), "rule__Fragment__SyncAssignment_7");
			builder.put(grammarAccess.getFragmentAccess().getIsOfflodableAssignment_9(), "rule__Fragment__IsOfflodableAssignment_9");
			builder.put(grammarAccess.getFragmentAccess().getInitAssignment_11(), "rule__Fragment__InitAssignment_11");
			builder.put(grammarAccess.getSystemAccess().getNameAssignment_1(), "rule__System__NameAssignment_1");
			builder.put(grammarAccess.getSystemAccess().getDevicesAssignment_3(), "rule__System__DevicesAssignment_3");
			builder.put(grammarAccess.getSystemAccess().getDevicesAssignment_4_1(), "rule__System__DevicesAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MCCGrammarAccess grammarAccess;

	@Override
	protected InternalMCCParser createParser() {
		InternalMCCParser result = new InternalMCCParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MCCGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MCCGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}

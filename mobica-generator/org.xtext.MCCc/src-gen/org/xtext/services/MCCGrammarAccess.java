/*
 * generated by Xtext 2.34.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MCCGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MCC.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDevicesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDevicesDeviceParserRuleCall_0_0 = (RuleCall)cDevicesAssignment_0.eContents().get(0);
		private final Assignment cApplicationsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cApplicationsApplicationParserRuleCall_1_0 = (RuleCall)cApplicationsAssignment_1.eContents().get(0);
		private final Assignment cSystemsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSystemsSystemParserRuleCall_2_0 = (RuleCall)cSystemsAssignment_2.eContents().get(0);
		
		//Model:
		//     (devices+=Device | applications+=Application | systems += System)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(devices+=Device | applications+=Application | systems += System)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//devices+=Device
		public Assignment getDevicesAssignment_0() { return cDevicesAssignment_0; }
		
		//Device
		public RuleCall getDevicesDeviceParserRuleCall_0_0() { return cDevicesDeviceParserRuleCall_0_0; }
		
		//applications+=Application
		public Assignment getApplicationsAssignment_1() { return cApplicationsAssignment_1; }
		
		//Application
		public RuleCall getApplicationsApplicationParserRuleCall_1_0() { return cApplicationsApplicationParserRuleCall_1_0; }
		
		//systems += System
		public Assignment getSystemsAssignment_2() { return cSystemsAssignment_2; }
		
		//System
		public RuleCall getSystemsSystemParserRuleCall_2_0() { return cSystemsSystemParserRuleCall_2_0; }
	}
	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MCC.Device");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMobileParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCloudParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Device:
		//    Mobile | Cloud
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Mobile | Cloud
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Mobile
		public RuleCall getMobileParserRuleCall_0() { return cMobileParserRuleCall_0; }
		
		//Cloud
		public RuleCall getCloudParserRuleCall_1() { return cCloudParserRuleCall_1; }
	}
	public class CloudElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MCC.Cloud");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCloudKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCpuInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCpuInstructionsINTTerminalRuleCall_3_0 = (RuleCall)cCpuInstructionsAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cApplicationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cApplicationsApplicationCrossReference_5_0 = (CrossReference)cApplicationsAssignment_5.eContents().get(0);
		private final RuleCall cApplicationsApplicationIDTerminalRuleCall_5_0_1 = (RuleCall)cApplicationsApplicationCrossReference_5_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Cloud:
		//    'Cloud' name=ID '[' cpuInstructions=INT ',' applications+=[Application] ']'';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Cloud' name=ID '[' cpuInstructions=INT ',' applications+=[Application] ']'';'
		public Group getGroup() { return cGroup; }
		
		//'Cloud'
		public Keyword getCloudKeyword_0() { return cCloudKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//cpuInstructions=INT
		public Assignment getCpuInstructionsAssignment_3() { return cCpuInstructionsAssignment_3; }
		
		//INT
		public RuleCall getCpuInstructionsINTTerminalRuleCall_3_0() { return cCpuInstructionsINTTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//applications+=[Application]
		public Assignment getApplicationsAssignment_5() { return cApplicationsAssignment_5; }
		
		//[Application]
		public CrossReference getApplicationsApplicationCrossReference_5_0() { return cApplicationsApplicationCrossReference_5_0; }
		
		//ID
		public RuleCall getApplicationsApplicationIDTerminalRuleCall_5_0_1() { return cApplicationsApplicationIDTerminalRuleCall_5_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class MobileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MCC.Mobile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMobileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCpuInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCpuInstructionsINTTerminalRuleCall_3_0 = (RuleCall)cCpuInstructionsAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cApplicationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cApplicationsApplicationCrossReference_5_0 = (CrossReference)cApplicationsAssignment_5.eContents().get(0);
		private final RuleCall cApplicationsApplicationIDTerminalRuleCall_5_0_1 = (RuleCall)cApplicationsApplicationCrossReference_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBatteryAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBatteryINTTerminalRuleCall_7_0 = (RuleCall)cBatteryAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNetworkAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNetworkINTTerminalRuleCall_9_0 = (RuleCall)cNetworkAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cMemoryAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cMemoryINTTerminalRuleCall_11_0 = (RuleCall)cMemoryAssignment_11.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cSemicolonKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Mobile:
		//    'Mobile' name=ID '[' cpuInstructions=INT ',' applications+=[Application] ',' battery=INT
		//        ',' network=INT ',' memory=INT ']'
		//        ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Mobile' name=ID '[' cpuInstructions=INT ',' applications+=[Application] ',' battery=INT
		//    ',' network=INT ',' memory=INT ']'
		//    ';'
		public Group getGroup() { return cGroup; }
		
		//'Mobile'
		public Keyword getMobileKeyword_0() { return cMobileKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//cpuInstructions=INT
		public Assignment getCpuInstructionsAssignment_3() { return cCpuInstructionsAssignment_3; }
		
		//INT
		public RuleCall getCpuInstructionsINTTerminalRuleCall_3_0() { return cCpuInstructionsINTTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//applications+=[Application]
		public Assignment getApplicationsAssignment_5() { return cApplicationsAssignment_5; }
		
		//[Application]
		public CrossReference getApplicationsApplicationCrossReference_5_0() { return cApplicationsApplicationCrossReference_5_0; }
		
		//ID
		public RuleCall getApplicationsApplicationIDTerminalRuleCall_5_0_1() { return cApplicationsApplicationIDTerminalRuleCall_5_0_1; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//battery=INT
		public Assignment getBatteryAssignment_7() { return cBatteryAssignment_7; }
		
		//INT
		public RuleCall getBatteryINTTerminalRuleCall_7_0() { return cBatteryINTTerminalRuleCall_7_0; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//network=INT
		public Assignment getNetworkAssignment_9() { return cNetworkAssignment_9; }
		
		//INT
		public RuleCall getNetworkINTTerminalRuleCall_9_0() { return cNetworkINTTerminalRuleCall_9_0; }
		
		//','
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//memory=INT
		public Assignment getMemoryAssignment_11() { return cMemoryAssignment_11; }
		
		//INT
		public RuleCall getMemoryINTTerminalRuleCall_11_0() { return cMemoryINTTerminalRuleCall_11_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_12() { return cRightSquareBracketKeyword_12; }
		
		//';'
		public Keyword getSemicolonKeyword_13() { return cSemicolonKeyword_13; }
	}
	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MCC.Application");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFragmentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFragmentsFragmentParserRuleCall_3_0 = (RuleCall)cFragmentsAssignment_3.eContents().get(0);
		private final Assignment cStructureAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStructureStructureParserRuleCall_4_0 = (RuleCall)cStructureAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Application:
		//    'Application' name=ID '{' fragments+=Fragment+   structure=Structure '}'';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Application' name=ID '{' fragments+=Fragment+   structure=Structure '}'';'
		public Group getGroup() { return cGroup; }
		
		//'Application'
		public Keyword getApplicationKeyword_0() { return cApplicationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//fragments+=Fragment+
		public Assignment getFragmentsAssignment_3() { return cFragmentsAssignment_3; }
		
		//Fragment
		public RuleCall getFragmentsFragmentParserRuleCall_3_0() { return cFragmentsFragmentParserRuleCall_3_0; }
		
		//structure=Structure
		public Assignment getStructureAssignment_4() { return cStructureAssignment_4; }
		
		//Structure
		public RuleCall getStructureStructureParserRuleCall_4_0() { return cStructureStructureParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class StructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MCC.Structure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEdgesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEdgesEdgeParserRuleCall_3_0 = (RuleCall)cEdgesAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Structure:
		//    'Structure' name=ID '['
		//        edges+=Edge+
		//    ']'';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Structure' name=ID '['
		//    edges+=Edge+
		//']'';'
		public Group getGroup() { return cGroup; }
		
		//'Structure'
		public Keyword getStructureKeyword_0() { return cStructureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//edges+=Edge+
		public Assignment getEdgesAssignment_3() { return cEdgesAssignment_3; }
		
		//Edge
		public RuleCall getEdgesEdgeParserRuleCall_3_0() { return cEdgesEdgeParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class EdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MCC.Edge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cStartFragmentCrossReference_0_0 = (CrossReference)cStartAssignment_0.eContents().get(0);
		private final RuleCall cStartFragmentIDTerminalRuleCall_0_0_1 = (RuleCall)cStartFragmentCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cStopAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStopFragmentCrossReference_2_0 = (CrossReference)cStopAssignment_2.eContents().get(0);
		private final RuleCall cStopFragmentIDTerminalRuleCall_2_0_1 = (RuleCall)cStopFragmentCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStopAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cStopFragmentCrossReference_3_1_0 = (CrossReference)cStopAssignment_3_1.eContents().get(0);
		private final RuleCall cStopFragmentIDTerminalRuleCall_3_1_0_1 = (RuleCall)cStopFragmentCrossReference_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Edge:
		//    start=[Fragment] operator=Operator stop+=[Fragment](',' stop+=[Fragment])*  ';'
		////    start=[Fragment] operator=Operator stop=Expression  ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//start=[Fragment] operator=Operator stop+=[Fragment](',' stop+=[Fragment])*  ';'
		public Group getGroup() { return cGroup; }
		
		//start=[Fragment]
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//[Fragment]
		public CrossReference getStartFragmentCrossReference_0_0() { return cStartFragmentCrossReference_0_0; }
		
		//ID
		public RuleCall getStartFragmentIDTerminalRuleCall_0_0_1() { return cStartFragmentIDTerminalRuleCall_0_0_1; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }
		
		//stop+=[Fragment]
		public Assignment getStopAssignment_2() { return cStopAssignment_2; }
		
		//[Fragment]
		public CrossReference getStopFragmentCrossReference_2_0() { return cStopFragmentCrossReference_2_0; }
		
		//ID
		public RuleCall getStopFragmentIDTerminalRuleCall_2_0_1() { return cStopFragmentIDTerminalRuleCall_2_0_1; }
		
		//(',' stop+=[Fragment])*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//stop+=[Fragment]
		public Assignment getStopAssignment_3_1() { return cStopAssignment_3_1; }
		
		//[Fragment]
		public CrossReference getStopFragmentCrossReference_3_1_0() { return cStopFragmentCrossReference_3_1_0; }
		
		//ID
		public RuleCall getStopFragmentIDTerminalRuleCall_3_1_0_1() { return cStopFragmentIDTerminalRuleCall_3_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class FragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MCC.Fragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFragmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsINTTerminalRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMemoryAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMemoryINTTerminalRuleCall_5_0 = (RuleCall)cMemoryAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSyncAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSyncINTTerminalRuleCall_7_0 = (RuleCall)cSyncAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cIsOfflodableAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final Alternatives cIsOfflodableAlternatives_9_0 = (Alternatives)cIsOfflodableAssignment_9.eContents().get(0);
		private final Keyword cIsOfflodableTrueKeyword_9_0_0 = (Keyword)cIsOfflodableAlternatives_9_0.eContents().get(0);
		private final Keyword cIsOfflodableFalseKeyword_9_0_1 = (Keyword)cIsOfflodableAlternatives_9_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cInitAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final Keyword cInitInitKeyword_11_0 = (Keyword)cInitAssignment_11.eContents().get(0);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Fragment:
		//    'Fragment'  name=ID '[' instructions=INT ',' memory=INT ',' sync=INT ',' isOfflodable=('true'|'false') ']' (init='init')?';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Fragment'  name=ID '[' instructions=INT ',' memory=INT ',' sync=INT ',' isOfflodable=('true'|'false') ']' (init='init')?';'
		public Group getGroup() { return cGroup; }
		
		//'Fragment'
		public Keyword getFragmentKeyword_0() { return cFragmentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//instructions=INT
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }
		
		//INT
		public RuleCall getInstructionsINTTerminalRuleCall_3_0() { return cInstructionsINTTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//memory=INT
		public Assignment getMemoryAssignment_5() { return cMemoryAssignment_5; }
		
		//INT
		public RuleCall getMemoryINTTerminalRuleCall_5_0() { return cMemoryINTTerminalRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//sync=INT
		public Assignment getSyncAssignment_7() { return cSyncAssignment_7; }
		
		//INT
		public RuleCall getSyncINTTerminalRuleCall_7_0() { return cSyncINTTerminalRuleCall_7_0; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//isOfflodable=('true'|'false')
		public Assignment getIsOfflodableAssignment_9() { return cIsOfflodableAssignment_9; }
		
		//('true'|'false')
		public Alternatives getIsOfflodableAlternatives_9_0() { return cIsOfflodableAlternatives_9_0; }
		
		//'true'
		public Keyword getIsOfflodableTrueKeyword_9_0_0() { return cIsOfflodableTrueKeyword_9_0_0; }
		
		//'false'
		public Keyword getIsOfflodableFalseKeyword_9_0_1() { return cIsOfflodableFalseKeyword_9_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_10() { return cRightSquareBracketKeyword_10; }
		
		//(init='init')?
		public Assignment getInitAssignment_11() { return cInitAssignment_11; }
		
		//'init'
		public Keyword getInitInitKeyword_11_0() { return cInitInitKeyword_11_0; }
		
		//';'
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }
	}
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MCC.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDevicesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDevicesDeviceCrossReference_3_0 = (CrossReference)cDevicesAssignment_3.eContents().get(0);
		private final RuleCall cDevicesDeviceIDTerminalRuleCall_3_0_1 = (RuleCall)cDevicesDeviceCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDevicesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cDevicesDeviceCrossReference_4_1_0 = (CrossReference)cDevicesAssignment_4_1.eContents().get(0);
		private final RuleCall cDevicesDeviceIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDevicesDeviceCrossReference_4_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//System:
		//    'System' name=ID ':=' devices+=[Device] ('|' devices+=[Device])* ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'System' name=ID ':=' devices+=[Device] ('|' devices+=[Device])* ';'
		public Group getGroup() { return cGroup; }
		
		//'System'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//devices+=[Device]
		public Assignment getDevicesAssignment_3() { return cDevicesAssignment_3; }
		
		//[Device]
		public CrossReference getDevicesDeviceCrossReference_3_0() { return cDevicesDeviceCrossReference_3_0; }
		
		//ID
		public RuleCall getDevicesDeviceIDTerminalRuleCall_3_0_1() { return cDevicesDeviceIDTerminalRuleCall_3_0_1; }
		
		//('|' devices+=[Device])*
		public Group getGroup_4() { return cGroup_4; }
		
		//'|'
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }
		
		//devices+=[Device]
		public Assignment getDevicesAssignment_4_1() { return cDevicesAssignment_4_1; }
		
		//[Device]
		public CrossReference getDevicesDeviceCrossReference_4_1_0() { return cDevicesDeviceCrossReference_4_1_0; }
		
		//ID
		public RuleCall getDevicesDeviceIDTerminalRuleCall_4_1_0_1() { return cDevicesDeviceIDTerminalRuleCall_4_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	
	public class OperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MCC.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNDCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNDCHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cNDCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPAREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPARHyphenMinusHyphenMinusVerticalLineKeyword_1_0 = (Keyword)cPAREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSEQHyphenMinusHyphenMinusColonColonKeyword_2_0 = (Keyword)cSEQEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Operator:
		//    NDC = '-->' | PAR = '--|' | SEQ ='--::'
		//;
		public EnumRule getRule() { return rule; }
		
		//NDC = '-->' | PAR = '--|' | SEQ ='--::'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NDC = '-->'
		public EnumLiteralDeclaration getNDCEnumLiteralDeclaration_0() { return cNDCEnumLiteralDeclaration_0; }
		
		//'-->'
		public Keyword getNDCHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0() { return cNDCHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0; }
		
		//PAR = '--|'
		public EnumLiteralDeclaration getPAREnumLiteralDeclaration_1() { return cPAREnumLiteralDeclaration_1; }
		
		//'--|'
		public Keyword getPARHyphenMinusHyphenMinusVerticalLineKeyword_1_0() { return cPARHyphenMinusHyphenMinusVerticalLineKeyword_1_0; }
		
		//SEQ ='--::'
		public EnumLiteralDeclaration getSEQEnumLiteralDeclaration_2() { return cSEQEnumLiteralDeclaration_2; }
		
		//'--::'
		public Keyword getSEQHyphenMinusHyphenMinusColonColonKeyword_2_0() { return cSEQHyphenMinusHyphenMinusColonColonKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final DeviceElements pDevice;
	private final CloudElements pCloud;
	private final MobileElements pMobile;
	private final ApplicationElements pApplication;
	private final StructureElements pStructure;
	private final EdgeElements pEdge;
	private final OperatorElements eOperator;
	private final FragmentElements pFragment;
	private final SystemElements pSystem;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MCCGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDevice = new DeviceElements();
		this.pCloud = new CloudElements();
		this.pMobile = new MobileElements();
		this.pApplication = new ApplicationElements();
		this.pStructure = new StructureElements();
		this.pEdge = new EdgeElements();
		this.eOperator = new OperatorElements();
		this.pFragment = new FragmentElements();
		this.pSystem = new SystemElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.MCC".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//     (devices+=Device | applications+=Application | systems += System)*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Device:
	//    Mobile | Cloud
	//;
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}
	
	//Cloud:
	//    'Cloud' name=ID '[' cpuInstructions=INT ',' applications+=[Application] ']'';'
	//;
	public CloudElements getCloudAccess() {
		return pCloud;
	}
	
	public ParserRule getCloudRule() {
		return getCloudAccess().getRule();
	}
	
	//Mobile:
	//    'Mobile' name=ID '[' cpuInstructions=INT ',' applications+=[Application] ',' battery=INT
	//        ',' network=INT ',' memory=INT ']'
	//        ';'
	//;
	public MobileElements getMobileAccess() {
		return pMobile;
	}
	
	public ParserRule getMobileRule() {
		return getMobileAccess().getRule();
	}
	
	//Application:
	//    'Application' name=ID '{' fragments+=Fragment+   structure=Structure '}'';'
	//;
	public ApplicationElements getApplicationAccess() {
		return pApplication;
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}
	
	//Structure:
	//    'Structure' name=ID '['
	//        edges+=Edge+
	//    ']'';'
	//;
	public StructureElements getStructureAccess() {
		return pStructure;
	}
	
	public ParserRule getStructureRule() {
		return getStructureAccess().getRule();
	}
	
	//Edge:
	//    start=[Fragment] operator=Operator stop+=[Fragment](',' stop+=[Fragment])*  ';'
	////    start=[Fragment] operator=Operator stop=Expression  ';'
	//;
	public EdgeElements getEdgeAccess() {
		return pEdge;
	}
	
	public ParserRule getEdgeRule() {
		return getEdgeAccess().getRule();
	}
	
	//enum Operator:
	//    NDC = '-->' | PAR = '--|' | SEQ ='--::'
	//;
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Fragment:
	//    'Fragment'  name=ID '[' instructions=INT ',' memory=INT ',' sync=INT ',' isOfflodable=('true'|'false') ']' (init='init')?';'
	//;
	public FragmentElements getFragmentAccess() {
		return pFragment;
	}
	
	public ParserRule getFragmentRule() {
		return getFragmentAccess().getRule();
	}
	
	//System:
	//    'System' name=ID ':=' devices+=[Device] ('|' devices+=[Device])* ';'
	//;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/**
 * generated by Xtext 2.34.0
 */
package org.xtext.mCC.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.mCC.Application;
import org.xtext.mCC.Device;
import org.xtext.mCC.MCCPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Device</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.mCC.impl.DeviceImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.mCC.impl.DeviceImpl#getCpuInstructions <em>Cpu Instructions</em>}</li>
 *   <li>{@link org.xtext.mCC.impl.DeviceImpl#getApplications <em>Applications</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DeviceImpl extends MinimalEObjectImpl.Container implements Device
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getCpuInstructions() <em>Cpu Instructions</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCpuInstructions()
   * @generated
   * @ordered
   */
  protected static final int CPU_INSTRUCTIONS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getCpuInstructions() <em>Cpu Instructions</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCpuInstructions()
   * @generated
   * @ordered
   */
  protected int cpuInstructions = CPU_INSTRUCTIONS_EDEFAULT;

  /**
   * The cached value of the '{@link #getApplications() <em>Applications</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getApplications()
   * @generated
   * @ordered
   */
  protected EList<Application> applications;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeviceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MCCPackage.Literals.DEVICE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MCCPackage.DEVICE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getCpuInstructions()
  {
    return cpuInstructions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCpuInstructions(int newCpuInstructions)
  {
    int oldCpuInstructions = cpuInstructions;
    cpuInstructions = newCpuInstructions;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MCCPackage.DEVICE__CPU_INSTRUCTIONS, oldCpuInstructions, cpuInstructions));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Application> getApplications()
  {
    if (applications == null)
    {
      applications = new EObjectResolvingEList<Application>(Application.class, this, MCCPackage.DEVICE__APPLICATIONS);
    }
    return applications;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MCCPackage.DEVICE__NAME:
        return getName();
      case MCCPackage.DEVICE__CPU_INSTRUCTIONS:
        return getCpuInstructions();
      case MCCPackage.DEVICE__APPLICATIONS:
        return getApplications();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MCCPackage.DEVICE__NAME:
        setName((String)newValue);
        return;
      case MCCPackage.DEVICE__CPU_INSTRUCTIONS:
        setCpuInstructions((Integer)newValue);
        return;
      case MCCPackage.DEVICE__APPLICATIONS:
        getApplications().clear();
        getApplications().addAll((Collection<? extends Application>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MCCPackage.DEVICE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MCCPackage.DEVICE__CPU_INSTRUCTIONS:
        setCpuInstructions(CPU_INSTRUCTIONS_EDEFAULT);
        return;
      case MCCPackage.DEVICE__APPLICATIONS:
        getApplications().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MCCPackage.DEVICE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MCCPackage.DEVICE__CPU_INSTRUCTIONS:
        return cpuInstructions != CPU_INSTRUCTIONS_EDEFAULT;
      case MCCPackage.DEVICE__APPLICATIONS:
        return applications != null && !applications.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", cpuInstructions: ");
    result.append(cpuInstructions);
    result.append(')');
    return result.toString();
  }

} //DeviceImpl

/**
 * generated by Xtext 2.34.0
 */
package org.xtext.mCC.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.mCC.Fragment;
import org.xtext.mCC.MCCPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Fragment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.mCC.impl.FragmentImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.mCC.impl.FragmentImpl#getInstructions <em>Instructions</em>}</li>
 *   <li>{@link org.xtext.mCC.impl.FragmentImpl#getMemory <em>Memory</em>}</li>
 *   <li>{@link org.xtext.mCC.impl.FragmentImpl#getSync <em>Sync</em>}</li>
 *   <li>{@link org.xtext.mCC.impl.FragmentImpl#getIsOfflodable <em>Is Offlodable</em>}</li>
 *   <li>{@link org.xtext.mCC.impl.FragmentImpl#getInit <em>Init</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FragmentImpl extends MinimalEObjectImpl.Container implements Fragment
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getInstructions() <em>Instructions</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInstructions()
   * @generated
   * @ordered
   */
  protected static final int INSTRUCTIONS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getInstructions() <em>Instructions</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInstructions()
   * @generated
   * @ordered
   */
  protected int instructions = INSTRUCTIONS_EDEFAULT;

  /**
   * The default value of the '{@link #getMemory() <em>Memory</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMemory()
   * @generated
   * @ordered
   */
  protected static final int MEMORY_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMemory() <em>Memory</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMemory()
   * @generated
   * @ordered
   */
  protected int memory = MEMORY_EDEFAULT;

  /**
   * The default value of the '{@link #getSync() <em>Sync</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSync()
   * @generated
   * @ordered
   */
  protected static final int SYNC_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getSync() <em>Sync</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSync()
   * @generated
   * @ordered
   */
  protected int sync = SYNC_EDEFAULT;

  /**
   * The default value of the '{@link #getIsOfflodable() <em>Is Offlodable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsOfflodable()
   * @generated
   * @ordered
   */
  protected static final String IS_OFFLODABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIsOfflodable() <em>Is Offlodable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsOfflodable()
   * @generated
   * @ordered
   */
  protected String isOfflodable = IS_OFFLODABLE_EDEFAULT;

  /**
   * The default value of the '{@link #getInit() <em>Init</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInit()
   * @generated
   * @ordered
   */
  protected static final String INIT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getInit() <em>Init</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInit()
   * @generated
   * @ordered
   */
  protected String init = INIT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FragmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MCCPackage.Literals.FRAGMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MCCPackage.FRAGMENT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getInstructions()
  {
    return instructions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInstructions(int newInstructions)
  {
    int oldInstructions = instructions;
    instructions = newInstructions;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MCCPackage.FRAGMENT__INSTRUCTIONS, oldInstructions, instructions));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getMemory()
  {
    return memory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMemory(int newMemory)
  {
    int oldMemory = memory;
    memory = newMemory;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MCCPackage.FRAGMENT__MEMORY, oldMemory, memory));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getSync()
  {
    return sync;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSync(int newSync)
  {
    int oldSync = sync;
    sync = newSync;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MCCPackage.FRAGMENT__SYNC, oldSync, sync));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIsOfflodable()
  {
    return isOfflodable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsOfflodable(String newIsOfflodable)
  {
    String oldIsOfflodable = isOfflodable;
    isOfflodable = newIsOfflodable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MCCPackage.FRAGMENT__IS_OFFLODABLE, oldIsOfflodable, isOfflodable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getInit()
  {
    return init;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInit(String newInit)
  {
    String oldInit = init;
    init = newInit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MCCPackage.FRAGMENT__INIT, oldInit, init));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MCCPackage.FRAGMENT__NAME:
        return getName();
      case MCCPackage.FRAGMENT__INSTRUCTIONS:
        return getInstructions();
      case MCCPackage.FRAGMENT__MEMORY:
        return getMemory();
      case MCCPackage.FRAGMENT__SYNC:
        return getSync();
      case MCCPackage.FRAGMENT__IS_OFFLODABLE:
        return getIsOfflodable();
      case MCCPackage.FRAGMENT__INIT:
        return getInit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MCCPackage.FRAGMENT__NAME:
        setName((String)newValue);
        return;
      case MCCPackage.FRAGMENT__INSTRUCTIONS:
        setInstructions((Integer)newValue);
        return;
      case MCCPackage.FRAGMENT__MEMORY:
        setMemory((Integer)newValue);
        return;
      case MCCPackage.FRAGMENT__SYNC:
        setSync((Integer)newValue);
        return;
      case MCCPackage.FRAGMENT__IS_OFFLODABLE:
        setIsOfflodable((String)newValue);
        return;
      case MCCPackage.FRAGMENT__INIT:
        setInit((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MCCPackage.FRAGMENT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MCCPackage.FRAGMENT__INSTRUCTIONS:
        setInstructions(INSTRUCTIONS_EDEFAULT);
        return;
      case MCCPackage.FRAGMENT__MEMORY:
        setMemory(MEMORY_EDEFAULT);
        return;
      case MCCPackage.FRAGMENT__SYNC:
        setSync(SYNC_EDEFAULT);
        return;
      case MCCPackage.FRAGMENT__IS_OFFLODABLE:
        setIsOfflodable(IS_OFFLODABLE_EDEFAULT);
        return;
      case MCCPackage.FRAGMENT__INIT:
        setInit(INIT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MCCPackage.FRAGMENT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MCCPackage.FRAGMENT__INSTRUCTIONS:
        return instructions != INSTRUCTIONS_EDEFAULT;
      case MCCPackage.FRAGMENT__MEMORY:
        return memory != MEMORY_EDEFAULT;
      case MCCPackage.FRAGMENT__SYNC:
        return sync != SYNC_EDEFAULT;
      case MCCPackage.FRAGMENT__IS_OFFLODABLE:
        return IS_OFFLODABLE_EDEFAULT == null ? isOfflodable != null : !IS_OFFLODABLE_EDEFAULT.equals(isOfflodable);
      case MCCPackage.FRAGMENT__INIT:
        return INIT_EDEFAULT == null ? init != null : !INIT_EDEFAULT.equals(init);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", instructions: ");
    result.append(instructions);
    result.append(", memory: ");
    result.append(memory);
    result.append(", sync: ");
    result.append(sync);
    result.append(", isOfflodable: ");
    result.append(isOfflodable);
    result.append(", init: ");
    result.append(init);
    result.append(')');
    return result.toString();
  }

} //FragmentImpl

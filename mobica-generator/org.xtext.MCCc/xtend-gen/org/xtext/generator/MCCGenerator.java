/**
 * generated by Xtext 2.34.0
 */
package org.xtext.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.xtext.mCC.Application;
import org.xtext.mCC.Cloud;
import org.xtext.mCC.Edge;
import org.xtext.mCC.Fragment;
import org.xtext.mCC.Mobile;
import org.xtext.mCC.Model;
import org.xtext.mCC.Structure;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MCCGenerator extends AbstractGenerator {
  private int id = 0;

  private ArrayList<String[]> list = new ArrayList<String[]>();

  private Hashtable<String, Integer> registry = new Hashtable<String, Integer>();

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.id = 0;
    Iterable<Model> _filter = Iterables.<Model>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Model.class);
    for (final Model m : _filter) {
      EList<org.xtext.mCC.System> _systems = m.getSystems();
      for (final org.xtext.mCC.System s : _systems) {
        String _name = s.getName();
        String _plus = (_name + ".xml");
        fsa.generateFile(_plus, this.compile(s.getDevices().get(0).getApplications().get(0), resource));
      }
    }
  }

  public CharSequence compile(final Application a, final Resource r) {
    CharSequence _xblockexpression = null;
    {
      int i = 0;
      EList<Fragment> _fragments = a.getFragments();
      for (final Fragment fragment : _fragments) {
        {
          this.registry.put(fragment.getName(), Integer.valueOf(i));
          i = (i + 1);
        }
      }
      this.getStaticPart();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?><!DOCTYPE nta PUBLIC \'-//Uppaal Team//DTD Flat System 1.1//EN\' \'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd\'>");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("<nta>");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("<declaration>");
      CharSequence _GlobalDeclarations = this.GlobalDeclarations(a, r);
      _builder.append(_GlobalDeclarations, "\t\t");
      _builder.append("</declaration>");
      _builder.newLineIfNotEmpty();
      {
        EList<Fragment> _fragments_1 = a.getFragments();
        for(final Fragment fragment_1 : _fragments_1) {
          _builder.append("\t\t");
          CharSequence _compile = this.compile(fragment_1, a.getStructure());
          _builder.append(_compile, "\t\t");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      String _string = this.getStaticPart().toString();
      _builder.append(_string, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("      ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("<system>system ");
      {
        EList<Fragment> _fragments_2 = a.getFragments();
        for(final Fragment f : _fragments_2) {
          String _name = f.getName();
          _builder.append(_name, "\t\t");
          _builder.append(",");
        }
      }
      _builder.append("Manager, Local, Remote, LocalCPU, RemoteCPU, CLOCK;</system>");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("</nta>");
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }

  public StringBuilder getStaticPart() {
    try {
      InputStream _resourceAsStream = this.getClass().getResourceAsStream("conf.xml");
      InputStreamReader _inputStreamReader = new InputStreamReader(_resourceAsStream);
      BufferedReader br = new BufferedReader(_inputStreamReader);
      String sCurrentLine = "";
      StringBuilder sb = new StringBuilder();
      while ((!Objects.equal((sCurrentLine = br.readLine()), null))) {
        {
          sb.append(sCurrentLine);
          sb.append("\n");
        }
      }
      return sb;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  public CharSequence compile(final Fragment f, final Structure s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<template>");
    _builder.newLine();
    _builder.append("<name x=\"5\" y=\"5\"> ");
    String _name = f.getName();
    _builder.append(_name);
    _builder.append(" </name>");
    _builder.newLineIfNotEmpty();
    _builder.append("<declaration></declaration>");
    _builder.newLine();
    final Function1<Edge, Boolean> _function = (Edge it) -> {
      String _name_1 = it.getStart().getName();
      String _name_2 = f.getName();
      return Boolean.valueOf(Objects.equal(_name_1, _name_2));
    };
    Iterable<Edge> edges = IterableExtensions.<Edge>filter(s.getEdges(), _function);
    _builder.newLineIfNotEmpty();
    boolean leafFragment = false;
    _builder.newLineIfNotEmpty();
    String middle = "";
    _builder.newLineIfNotEmpty();
    {
      final Iterable<Edge> _converted_edges = (Iterable<Edge>)edges;
      int _length = ((Object[])Conversions.unwrapArray(_converted_edges, Object.class)).length;
      boolean _equals = (_length == 0);
      if (_equals) {
        _builder.append(leafFragment = true);
        _builder.newLineIfNotEmpty();
      } else {
        int _iD = this.getID();
        String _plus = ("id" + Integer.valueOf(_iD));
        String _middle = middle = _plus;
        _builder.append(_middle);
        _builder.newLineIfNotEmpty();
        CharSequence _createLocation = this.createLocation(middle, null);
        _builder.append(_createLocation);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    int _iD_1 = this.getID();
    final String startLocation = ("id" + Integer.valueOf(_iD_1));
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _createLocation_1 = this.createLocation(startLocation, null);
    _builder.append(_createLocation_1);
    _builder.newLineIfNotEmpty();
    {
      for(final Edge e : edges) {
        {
          String _string = e.getOperator().toString();
          boolean _equals_1 = Objects.equal(_string, "-->");
          if (_equals_1) {
            {
              EList<Fragment> _stop = e.getStop();
              for(final Fragment destinationFragment : _stop) {
                String _string_1 = middle.toString();
                String _string_2 = startLocation.toString();
                Integer _get = this.registry.get(destinationFragment.getName());
                String _plus_1 = ("F[" + _get);
                String _plus_2 = (_plus_1 + "]!");
                final boolean x = this.list.add(new String[] { _string_1, _string_2, null, null, _plus_2, null });
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.newLine();
        _builder.newLine();
        {
          String _string_3 = e.getOperator().toString();
          boolean _equals_2 = Objects.equal(_string_3, "--|");
          if (_equals_2) {
            String _string_4 = middle.toString();
            String _string_5 = startLocation.toString();
            Integer _get_1 = this.registry.get(f.getName());
            String _plus_3 = ("B[" + _get_1);
            String _plus_4 = (_plus_3 + "]!");
            final boolean x_1 = this.list.add(new String[] { _string_4, _string_5, null, null, _plus_4, null });
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.newLine();
        {
          String _string_6 = e.getOperator().toString();
          boolean _equals_3 = Objects.equal(_string_6, "--::");
          if (_equals_3) {
            final List<Fragment> destinationFragments = ListExtensions.<Fragment>reverseView(e.getStop());
            _builder.newLineIfNotEmpty();
            {
              int _length_1 = ((Object[])Conversions.unwrapArray(destinationFragments, Object.class)).length;
              int _minus = (_length_1 - 1);
              IntegerRange _upTo = new IntegerRange(0, _minus);
              for(final Integer i : _upTo) {
                {
                  if (((i).intValue() == 0)) {
                    String _sequentialPart = this.sequentialPart(this.registry.get(destinationFragments.get((i).intValue()).getName()).toString(), this.registry.get(f.getName()).toString(), this.getLastID(), Boolean.valueOf(true), startLocation, middle);
                    _builder.append(_sequentialPart);
                    _builder.newLineIfNotEmpty();
                  } else {
                    int _size = destinationFragments.size();
                    int _minus_1 = (_size - 1);
                    boolean _equals_4 = ((i).intValue() == _minus_1);
                    if (_equals_4) {
                      String _string_7 = middle.toString();
                      String _lastID = this.getLastID();
                      String _string_8 = this.registry.get(destinationFragments.get((i).intValue()).getName()).toString();
                      String _plus_5 = ("F[" + _string_8);
                      String _plus_6 = (_plus_5 + "]!");
                      final boolean x_2 = this.list.add(new String[] { _string_7, _lastID, null, null, _plus_6, null });
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _sequentialPart_1 = this.sequentialPart(this.registry.get(destinationFragments.get((i).intValue()).getName()).toString(), this.registry.get(f.getName()).toString(), this.getLastID(), Boolean.valueOf(false), startLocation, middle);
                      _builder.append(_sequentialPart_1);
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t");
                      _builder.newLine();
                    }
                  }
                }
                _builder.newLine();
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    CharSequence _commonPart = this.commonPart(startLocation, middle, this.registry.get(f.getName()).toString(), s, f, Boolean.valueOf(leafFragment), startLocation);
    _builder.append(_commonPart);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      for(final String[] t : this.list) {
        CharSequence _createTransition = this.createTransition(t[0], t[1], t[2], t[3], t[4], t[5]);
        _builder.append(_createTransition);
        _builder.newLineIfNotEmpty();
      }
    }
    this.list.clear();
    _builder.newLineIfNotEmpty();
    _builder.append("</template>");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }

  public String sequentialPart(final String destinationID, final String fragmentID, final String lastIDLoc, final Boolean lastLocation, final String startLocation, final String middle) {
    String _xblockexpression = null;
    {
      int _iD = this.getID();
      final String newLocation = ("id" + Integer.valueOf(_iD));
      if ((lastLocation).booleanValue()) {
        this.list.add(new String[] { newLocation, startLocation, null, null, (("F[" + destinationID) + "]!"), null });
      } else {
        this.list.add(new String[] { newLocation, lastIDLoc, null, null, (("F[" + destinationID) + "]!"), null });
      }
      int _iD_1 = this.getID();
      final String managerLocation = ("id" + Integer.valueOf(_iD_1));
      this.list.add(new String[] { managerLocation, newLocation, null, null, (("completed[" + fragmentID) + "]?"), null });
      this.list.add(new String[] { managerLocation, managerLocation, null, null, (("manager[" + fragmentID) + "]!"), null });
      int _iD_2 = this.getID();
      final String initLocation = ("id" + Integer.valueOf(_iD_2));
      this.list.add(new String[] { initLocation, managerLocation, null, null, (("F[" + fragmentID) + "]?"), (("setInstructions(" + fragmentID) + ")") });
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _createLocation = this.createLocation(newLocation, null);
      _builder.append(_createLocation);
      _builder.newLineIfNotEmpty();
      CharSequence _createLocation_1 = this.createLocation(managerLocation, null);
      _builder.append(_createLocation_1);
      _builder.newLineIfNotEmpty();
      CharSequence _createLocation_2 = this.createLocation(initLocation, null);
      _builder.append(_createLocation_2);
      _builder.newLineIfNotEmpty();
      _xblockexpression = _builder.toString();
    }
    return _xblockexpression;
  }

  public CharSequence commonPart(final String initLocation, final String terminalID, final String fragmentID, final Structure s, final Fragment f, final Boolean leafFragment, final String startLocation) {
    CharSequence _xblockexpression = null;
    {
      int _iD = this.getID();
      final String newLocation = ("id" + Integer.valueOf(_iD));
      if ((leafFragment).booleanValue()) {
        this.list.add(new String[] { newLocation, startLocation, null, null, (("completed[" + fragmentID) + "]?"), null });
      } else {
        this.list.add(new String[] { newLocation, terminalID, null, null, (("completed[" + fragmentID) + "]?"), null });
      }
      this.list.add(new String[] { newLocation, newLocation, null, null, (("manager[" + fragmentID) + "]!"), null });
      String initLocationSpecial = null;
      String _init = f.getInit();
      boolean _equals = Objects.equal(_init, "init");
      if (_equals) {
        int _iD_1 = this.getID();
        String _plus = ("id" + Integer.valueOf(_iD_1));
        initLocationSpecial = _plus;
        this.list.add(new String[] { initLocationSpecial, newLocation, null, null, null, (("setInstructions(" + fragmentID) + ")") });
      } else {
        this.list.add(new String[] { initLocation, newLocation, null, null, (("F[" + fragmentID) + "]?"), (("setInstructions(" + fragmentID) + ")") });
      }
      final Function1<Edge, Boolean> _function = (Edge it) -> {
        String _string = it.getOperator().toString();
        return Boolean.valueOf(Objects.equal(_string, "--|"));
      };
      Iterable<Edge> _filter = IterableExtensions.<Edge>filter(s.getEdges(), _function);
      for (final Edge e : _filter) {
        boolean _contains = e.getStop().contains(f);
        if (_contains) {
          Integer _get = this.registry.get(e.getStart().getName());
          String _plus_1 = ("B[" + _get);
          String _plus_2 = (_plus_1 + "]?");
          this.list.add(new String[] { initLocation, newLocation, null, null, _plus_2, (("setInstructions(" + fragmentID) + ")") });
        }
      }
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _createLocation = this.createLocation(newLocation, null);
      _builder.append(_createLocation);
      _builder.newLineIfNotEmpty();
      {
        boolean _notEquals = (!Objects.equal(initLocationSpecial, null));
        if (_notEquals) {
          CharSequence _createLocation_1 = this.createLocation(initLocationSpecial, null);
          _builder.append(_createLocation_1);
          _builder.newLineIfNotEmpty();
          _builder.append("<init ref=\"");
          _builder.append(initLocationSpecial);
          _builder.append("\"/>");
          _builder.newLineIfNotEmpty();
        } else {
          _builder.append("<init ref=\"");
          _builder.append(initLocation);
          _builder.append("\"/>");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }

  public int getID() {
    return this.id = (this.id + 1);
  }

  public String getLastID() {
    return ("id" + Integer.valueOf(this.id));
  }

  public CharSequence createLocation(final String i, final String type) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<location id=\"");
    _builder.append(i);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<name>");
    _builder.append(i, "\t");
    _builder.append("</name>");
    _builder.newLineIfNotEmpty();
    {
      boolean _notEquals = (!Objects.equal(type, null));
      if (_notEquals) {
        _builder.append("\t");
        _builder.append("<");
        _builder.append(type, "\t");
        _builder.append("/>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</location>");
    return _builder;
  }

  public CharSequence createTransition(final String s, final String t, final String select, final String guard, final String sync, final String ass) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<transition>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<source ref=\"");
    _builder.append(s, "\t");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<target ref=\"");
    _builder.append(t, "\t");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      boolean _notEquals = (!Objects.equal(select, null));
      if (_notEquals) {
        _builder.append("\t<label kind=\"select\" >");
        _builder.append(select, "\t");
        _builder.append("</label>");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      boolean _notEquals_1 = (!Objects.equal(guard, null));
      if (_notEquals_1) {
        _builder.append("\t<label kind=\"guard\" >");
        _builder.append(guard, "\t");
        _builder.append("</label>");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      boolean _notEquals_2 = (!Objects.equal(sync, null));
      if (_notEquals_2) {
        _builder.append("\t<label kind=\"synchronisation\" >");
        _builder.append(sync, "\t");
        _builder.append("</label>");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      boolean _notEquals_3 = (!Objects.equal(ass, null));
      if (_notEquals_3) {
        _builder.append("\t<label kind=\"assignment\" >");
        _builder.append(ass, "\t");
        _builder.append("</label>");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("</transition>");
    _builder.newLine();
    return _builder;
  }

  public CharSequence Manager() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<template><name>Manager</name>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<declaration>int x;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/*");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("0=null");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("1=loadL");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("2=loadR");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("3=offload");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("4=migrate");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("5=back");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("6=restore");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("7=disposeL");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("8=disposeR");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("void localRemoteSync(int i){");
    _builder.newLine();
    _builder.append("if(IsLocal==true){");
    _builder.newLine();
    _builder.append("clockTime=(Info[i].megaByte*10)/network;");
    _builder.newLine();
    _builder.append("if(battery>(clockTime/10)){");
    _builder.newLine();
    _builder.append("battery-=(clockTime/10);");
    _builder.newLine();
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("battery=0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void remoteLocalSync(int i){");
    _builder.newLine();
    _builder.append("if(IsLocal==false){");
    _builder.newLine();
    _builder.append("clockTime=(Info[i].megaByte*10)/network;");
    _builder.newLine();
    _builder.append("if(battery>(clockTime/10)){");
    _builder.newLine();
    _builder.append("battery-=(clockTime/10);");
    _builder.newLine();
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("battery=0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("</declaration>");
    _builder.newLine();
    int _iD = this.getID();
    final String init = ("id" + Integer.valueOf(_iD));
    _builder.newLineIfNotEmpty();
    int _iD_1 = this.getID();
    final String second = ("id" + Integer.valueOf(_iD_1));
    _builder.newLineIfNotEmpty();
    CharSequence _createLocation = this.createLocation(init, "committed");
    _builder.append(_createLocation);
    _builder.newLineIfNotEmpty();
    CharSequence _createLocation_1 = this.createLocation(second, null);
    _builder.append(_createLocation_1);
    _builder.newLineIfNotEmpty();
    _builder.append("<init ref=\"");
    _builder.append(second);
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _createTransition = this.createTransition(init, second, null, "operation[x]!=0 and operation[x]==5", "disposeR[x]!", "operation[x]=8");
    _builder.append(_createTransition);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_1 = this.createTransition(init, second, null, "operation[x]!=0 and operation[x]==3", "disposeL[x]!", "operation[x]=7");
    _builder.append(_createTransition_1);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_2 = this.createTransition(init, second, null, "operation[x]==0", "loadL[x]!", "operation[x]=1");
    _builder.append(_createTransition_2);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_3 = this.createTransition(init, second, null, "operation[x]==0 and Info[x].isOffloadable==true", "loadR[x]!", "operation[x]=2");
    _builder.append(_createTransition_3);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_4 = this.createTransition(init, second, null, "operation[x]!=0 and (operation[x]==2 or operation[x]==3 or operation[x]==4 or operation[x]==7)", "restore[x]!", "operation[x]=6");
    _builder.append(_createTransition_4);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_5 = this.createTransition(init, second, null, "operation[x]!=0 and (operation[x]==2 or operation[x]==3 or operation[x]==4 or operation[x]==7)", "back[x]!", "operation[x]=5");
    _builder.append(_createTransition_5);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_6 = this.createTransition(init, second, null, "Info[x].isOffloadable==true and operation[x]!=0 and (operation[x]==1 or operation[x]==5 or operation[x]==6 or operation[x]==8)", "migrate[x]!", "operation[x]=4");
    _builder.append(_createTransition_6);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_7 = this.createTransition(init, second, null, "Info[x].isOffloadable==true and operation[x]!=0 and (operation[x]==1 or operation[x]==5 or operation[x]==6 or operation[x]==8)", "offload[x]!", "operation[x]=3");
    _builder.append(_createTransition_7);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_8 = this.createTransition(second, init, "e : id_t", "(fragmentToCompute!=e or instructionsNumber[e]>0)and p==true and battery>20", "manager[e]?", "x=e");
    _builder.append(_createTransition_8);
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</template>");
    _builder.newLine();
    return _builder;
  }

  public CharSequence Local() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<template>");
    _builder.newLine();
    _builder.append("<name>Local</name>");
    _builder.newLine();
    _builder.append("<parameter>const id_t i</parameter>");
    _builder.newLine();
    _builder.append("<declaration>");
    _builder.newLine();
    _builder.append("</declaration>");
    _builder.newLine();
    int _iD = this.getID();
    final String idle = ("id" + Integer.valueOf(_iD));
    _builder.newLineIfNotEmpty();
    int _iD_1 = this.getID();
    final String nul = ("id" + Integer.valueOf(_iD_1));
    _builder.newLineIfNotEmpty();
    int _iD_2 = this.getID();
    final String running = ("id" + Integer.valueOf(_iD_2));
    _builder.newLineIfNotEmpty();
    CharSequence _createLocation = this.createLocation(idle, null);
    _builder.append(_createLocation);
    _builder.newLineIfNotEmpty();
    CharSequence _createLocation_1 = this.createLocation(nul, null);
    _builder.append(_createLocation_1);
    _builder.newLineIfNotEmpty();
    CharSequence _createLocation_2 = this.createLocation(running, null);
    _builder.append(_createLocation_2);
    _builder.newLineIfNotEmpty();
    _builder.append("<init ref=\"");
    _builder.append(nul);
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _createTransition = this.createTransition(idle, running, null, null, "loadL[i]?", "setInstructions(i), initDataSync(i)");
    _builder.append(_createTransition);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_1 = this.createTransition(running, running, null, "instructionsNumber[i]>0", "executeL!", "fragmentToCompute=i, p=true, isLocal[i]=true");
    _builder.append(_createTransition_1);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_2 = this.createTransition(nul, running, null, null, "loadL[i]?", "memoryUp(i), setInstructions(i), initDataSync(i)");
    _builder.append(_createTransition_2);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_3 = this.createTransition(idle, nul, null, null, "disposeL[i]?", "memoryDown(i)");
    _builder.append(_createTransition_3);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_4 = this.createTransition(running, nul, null, null, "migrate[i]?", "memoryDown(i), dataSync(i)");
    _builder.append(_createTransition_4);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_5 = this.createTransition(running, idle, null, null, "offload[i]?", "dataSync(i)");
    _builder.append(_createTransition_5);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_6 = this.createTransition(running, idle, null, "instructionsNumber[i]==0", "completed[i]!", "isLocal[i]=true, where=true");
    _builder.append(_createTransition_6);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_7 = this.createTransition(idle, running, null, null, "restore[i]?", "memoryUp(i)");
    _builder.append(_createTransition_7);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_8 = this.createTransition(idle, running, null, null, "back[i]?", "memoryUp(i)");
    _builder.append(_createTransition_8);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_9 = this.createTransition(nul, running, null, null, "restore[i]?", "memoryUp(i)");
    _builder.append(_createTransition_9);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_10 = this.createTransition(nul, running, null, null, "back[i]?", "memoryUp(i)");
    _builder.append(_createTransition_10);
    _builder.newLineIfNotEmpty();
    _builder.append("</template>");
    _builder.newLine();
    return _builder;
  }

  public CharSequence Remote() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<template>");
    _builder.newLine();
    _builder.append("<name>Remote</name>");
    _builder.newLine();
    _builder.append("<parameter>const id_t i</parameter>");
    _builder.newLine();
    _builder.append("<declaration>void initDataSync(int i){");
    _builder.newLine();
    _builder.append("if(isLocal[i]==true){");
    _builder.newLine();
    _builder.append("int var=(Info[i].megaByte*10)/network;");
    _builder.newLine();
    _builder.append("globalTime+=var;");
    _builder.newLine();
    _builder.append("battery-=(var/10);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void dataSync(int i){");
    _builder.newLine();
    _builder.append("if(isLocal[i]==false){");
    _builder.newLine();
    _builder.append("int var=(Info[i].megaByte*10)/network;");
    _builder.newLine();
    _builder.append("globalTime+=var;");
    _builder.newLine();
    _builder.append("battery-=(var/10);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("}</declaration>");
    _builder.newLine();
    int _iD = this.getID();
    final String idle = ("id" + Integer.valueOf(_iD));
    _builder.newLineIfNotEmpty();
    int _iD_1 = this.getID();
    final String nul = ("id" + Integer.valueOf(_iD_1));
    _builder.newLineIfNotEmpty();
    int _iD_2 = this.getID();
    final String running = ("id" + Integer.valueOf(_iD_2));
    _builder.newLineIfNotEmpty();
    CharSequence _createLocation = this.createLocation(idle, null);
    _builder.append(_createLocation);
    _builder.newLineIfNotEmpty();
    CharSequence _createLocation_1 = this.createLocation(nul, null);
    _builder.append(_createLocation_1);
    _builder.newLineIfNotEmpty();
    CharSequence _createLocation_2 = this.createLocation(running, null);
    _builder.append(_createLocation_2);
    _builder.newLineIfNotEmpty();
    _builder.append("<init ref=\"");
    _builder.append(nul);
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _createTransition = this.createTransition(idle, running, null, null, "loadR[i]?", "setInstructions(i), initDataSync(i)");
    _builder.append(_createTransition);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_1 = this.createTransition(running, running, null, "instructionsNumber[i]>0", "executeR!", "fragmentToCompute=i, p=true, isLocal[i]=false");
    _builder.append(_createTransition_1);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_2 = this.createTransition(nul, running, null, null, "loadR[i]?", "setInstructions(i), initDataSync(i)");
    _builder.append(_createTransition_2);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_3 = this.createTransition(idle, nul, null, null, "disposeR[i]?", null);
    _builder.append(_createTransition_3);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_4 = this.createTransition(running, nul, null, null, "restore[i]?", "dataSync(i)");
    _builder.append(_createTransition_4);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_5 = this.createTransition(running, idle, null, null, "back[i]?", "dataSync(i)");
    _builder.append(_createTransition_5);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_6 = this.createTransition(running, idle, null, "instructionsNumber[i]==0", "completed[i]!", "isLocal[i]=false, where=false");
    _builder.append(_createTransition_6);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_7 = this.createTransition(idle, running, null, null, "migrate[i]?", null);
    _builder.append(_createTransition_7);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_8 = this.createTransition(idle, running, null, null, "offload[i]?", null);
    _builder.append(_createTransition_8);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_9 = this.createTransition(nul, running, null, null, "migrate[i]?", null);
    _builder.append(_createTransition_9);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_10 = this.createTransition(nul, running, null, null, "offload[i]?", null);
    _builder.append(_createTransition_10);
    _builder.newLineIfNotEmpty();
    _builder.append("</template>");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }

  public CharSequence LocalCpu() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<template>");
    _builder.newLine();
    _builder.append("<name>LocalCPU</name>");
    _builder.newLine();
    _builder.append("<declaration>void compute(){if(instructionsNumber[fragmentToCompute]>=mobileInstructions){\tbattery-=10;\tinstructionsNumber[fragmentToCompute]-=mobileInstructions;}else{battery-=((instructionsNumber[fragmentToCompute]*10)/mobileInstructions);\tinstructionsNumber[fragmentToCompute]=0;}globalTime+=10;}</declaration>");
    _builder.newLine();
    int _iD = this.getID();
    final String init = ("id" + Integer.valueOf(_iD));
    _builder.newLineIfNotEmpty();
    int _iD_1 = this.getID();
    final String second = ("id" + Integer.valueOf(_iD_1));
    _builder.newLineIfNotEmpty();
    CharSequence _createLocation = this.createLocation(init, "committed");
    _builder.append(_createLocation);
    _builder.newLineIfNotEmpty();
    CharSequence _createLocation_1 = this.createLocation(second, null);
    _builder.append(_createLocation_1);
    _builder.newLineIfNotEmpty();
    _builder.append("<init ref=\"");
    _builder.append(second);
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _createTransition = this.createTransition(init, second, null, null, null, "compute()");
    _builder.append(_createTransition);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_1 = this.createTransition(second, init, null, null, "executeL?", null);
    _builder.append(_createTransition_1);
    _builder.newLineIfNotEmpty();
    _builder.append("</template>");
    _builder.newLine();
    return _builder;
  }

  public CharSequence remoteCpu() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<template>");
    _builder.newLine();
    _builder.append("<name>RemoteCPU</name>");
    _builder.newLine();
    _builder.append("<declaration>void computeR(){if(instructionsNumber[fragmentToCompute]>=cloudInstructions){\tinstructionsNumber[fragmentToCompute]-=cloudInstructions;}else{\tinstructionsNumber[fragmentToCompute]=0;}globalTime+=10;}</declaration>");
    _builder.newLine();
    int _iD = this.getID();
    final String init = ("id" + Integer.valueOf(_iD));
    _builder.newLineIfNotEmpty();
    int _iD_1 = this.getID();
    final String second = ("id" + Integer.valueOf(_iD_1));
    _builder.newLineIfNotEmpty();
    CharSequence _createLocation = this.createLocation(init, "committed");
    _builder.append(_createLocation);
    _builder.newLineIfNotEmpty();
    CharSequence _createLocation_1 = this.createLocation(second, null);
    _builder.append(_createLocation_1);
    _builder.newLineIfNotEmpty();
    _builder.append("<init ref=\"");
    _builder.append(second);
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _createTransition = this.createTransition(init, second, null, null, null, "computeR()");
    _builder.append(_createTransition);
    _builder.newLineIfNotEmpty();
    CharSequence _createTransition_1 = this.createTransition(second, init, null, null, "executeR?", null);
    _builder.append(_createTransition_1);
    _builder.newLineIfNotEmpty();
    _builder.append("</template>");
    _builder.newLine();
    return _builder;
  }

  public CharSequence GlobalDeclarations(final Application a, final Resource r) {
    CharSequence _xblockexpression = null;
    {
      final Mobile mobile = IterableExtensions.<Mobile>last(Iterables.<Mobile>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), Mobile.class));
      final Cloud cloud = IterableExtensions.<Cloud>last(Iterables.<Cloud>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), Cloud.class));
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("const int N=");
      int _size = a.getFragments().size();
      _builder.append(_size);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("typedef int[0, N-1] id_t;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("const int mobileInstructions=");
      int _cpuInstructions = mobile.getCpuInstructions();
      _builder.append(_cpuInstructions);
      _builder.append(", cloudInstructions=");
      int _cpuInstructions_1 = cloud.getCpuInstructions();
      _builder.append(_cpuInstructions_1);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("bool IsLocal=true;");
      _builder.newLine();
      _builder.append("bool managerEnabled=true;");
      _builder.newLine();
      _builder.append("int[0,2] fragmentStateLocal[N], fragmentStateRemote[N]; //0=null, 1=idle, 2=running");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("const int[0,100]  network=");
      int _network = mobile.getNetwork();
      _builder.append(_network);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("int[0,100] battery=");
      int _battery = mobile.getBattery();
      _builder.append(_battery);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("clock globalTime;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("int clockTime;");
      _builder.newLine();
      _builder.append("int memory ;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("int energy ;");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("chan F[N], startL[N], startR[N], stopL[N], stopR[N], disposeL[N], disposeR[N], completed[N], manager[N], time, timeR;");
      _builder.newLine();
      _builder.append("broadcast chan B[N];");
      _builder.newLine();
      _builder.append("chan executeL, executeR;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("//istruzione spedite al processore");
      _builder.newLine();
      _builder.append("int[0,N] fragmentToCompute=N;");
      _builder.newLine();
      _builder.append("int[0,150] instructionsNumber[N];");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("typedef struct ");
      _builder.newLine();
      _builder.append("{ int[0,150] instructions;  ");
      _builder.newLine();
      _builder.append("int[0,200] memory;");
      _builder.newLine();
      _builder.append("int[0,100] megaByte;");
      _builder.newLine();
      _builder.append("bool isOffloadable;");
      _builder.newLine();
      _builder.append("} Fragment;");
      _builder.newLine();
      _builder.append("const Fragment Info[N]={");
      _builder.newLine();
      {
        EList<Fragment> _fragments = a.getFragments();
        for(final Fragment f : _fragments) {
          _builder.append("\t");
          _builder.append("{");
          int _instructions = f.getInstructions();
          _builder.append(_instructions, "\t");
          _builder.append(",");
          int _memory = f.getMemory();
          _builder.append(_memory, "\t");
          _builder.append(",");
          int _sync = f.getSync();
          _builder.append(_sync, "\t");
          _builder.append(", ");
          String _isOfflodable = f.getIsOfflodable();
          _builder.append(_isOfflodable, "\t");
          _builder.append("}");
          _builder.newLineIfNotEmpty();
          {
            String _name = f.getName();
            String _name_1 = IterableExtensions.<Fragment>last(a.getFragments()).getName();
            boolean _notEquals = (!Objects.equal(_name, _name_1));
            if (_notEquals) {
              _builder.append("\t");
              _builder.append(",");
              _builder.newLine();
            }
          }
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("void memoryUp(int f){");
      _builder.newLine();
      _builder.append("memory+=Info[f].memory;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("void memoryDown(int f){");
      _builder.newLine();
      _builder.append("memory-=Info[f].memory;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("void setInstructions(int i){");
      _builder.newLine();
      _builder.append("instructionsNumber[i]=Info[i].instructions;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
}
